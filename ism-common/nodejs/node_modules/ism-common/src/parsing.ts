import Joi from 'joi';
import { validateJoiSchema } from './validation';
import * as Result from './result';
import { Exception, createException } from './exception';

export const parseJsonToDto = async <T>(
  data: string,
  validator: Joi.ObjectSchema<T>
): Promise<Result.Variant<T, Exception<'INVALID_JSON' | 'VALIDATION_FAILED', string>>> => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  } catch (err: any) {
    return Result.err(createException('INVALID_JSON', 'Provided body content is not a valid JSON'));
  }

  const [validateErr, dtoObject] = await validateJoiSchema(parsedData, validator);
  if (validateErr) return Result.err(validateErr);

  return Result.ok(dtoObject);
};
